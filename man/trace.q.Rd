% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CGD.R
\name{trace.q}
\alias{trace.q}
\title{分位点トレース}
\usage{
trace.q(
  quantiles,
  continuous = FALSE,
  symmetric = FALSE,
  v.grad = FALSE,
  uni.sigma = FALSE,
  diff.mean = FALSE,
  control = list(),
  type1.type = 1
)
}
\arguments{
\item{quantiles}{分位点を指定する data.frame( q = X座標 (クォンタイル), p = その点における確率 )
X座標 (クォンタイル) は昇順にソートしておくこと。
平均値は p = 0.5 の点のX座標として与えること。}

\item{continuous}{TRUE にすると、 type1.type = 1 または 2 のとき、独立区間を [0, 0] と [1, 1] の 2点にして、
確率密度関数が全区間 (-∞, ∞) で連続になるように分布構成を試みる (デフォルト: FALSE)。
type1.type = 1 または 2 のときに有効 (type1.type >= 3 では常に連続)。}

\item{symmetric}{TRUE にすると、確率密度関数が、平均点を中心として左右対称になるように試みる (デフォルト: FALSE)。
type1.type = 1 または 2 のときのみ有効。
type1.type = 2, symmetric = TRUE のときは、確率が 0.5 の点を quantiles に必ず指定する必要がある。
なお、 type1.type = 2, symmetric = TRUE のときの確率密度関数は平均値の点において微分できない。}

\item{v.grad}{TRUE にすると、 type1.type = 3 のとき、
裾部の左右の標準偏差が等しい、縦方向グラデーションの分布を構成する (デフォルト: FALSE)。}

\item{uni.sigma}{TRUE にすると、連続分布に対して、
構成要素の各正規分布の標準偏差を強制的に等しくする (デフォルト: FALSE)。
経路の構成点が少ない場合のみ有効
 (type1.type = 2 では 3点、type1.type = 3 では 3～4点、type1.type = 4 では 5点)。}

\item{diff.mean}{TRUE にすると、構成要素の各正規分布の平均値が異なるようになるように試みる (デフォルト: FALSE)。
不連続分布および type1.type = 1 または symmetric = TRUE では無効。
なお、 diff.mean = TRUE としても、結果的に、各正規分布の平均値が等しくなることもあり得る。}

\item{control}{nleqslv に渡す、同関数の control オプションのリスト (デフォルト: list())。
詳細は \href{https://cran.r-project.org/web/packages/nleqslv/nleqslv.pdf}{nleqslv} を参照。
デフォルトは空だが、条件不足のため "Jacobian is singular" のエラーになる可能性が高い場合は
allowSingular = TRUE が暗黙のうちに設定される。
ただし、引数 control のリストに allowSingular が与えられている場合は、引数のリストを優先する。}

\item{type1.type}{フィールドの type1.type に設定する値。 1、2、3、4 のいずれかを指定すること (デフォルト: 1)。

            type1.type の値によって、接続区間 (β_i, α_{i+1}) が type 1 の場合
             (この type 1 の詳細については \href{https://github.com/Kimitsuna-Goblin/CGD}{README.md} を参照)、
            接続区間の累積分布関数 Ψ_i(x) を以下のように計算する。

            1: Ψ_i(x) = ( α_{i+1} - x ) / ( α_{i+1} - β_i ) * Φ_i(x) +
                         ( x - β_i ) / ( α_{i+1} - β_i ) * Φ_{i+1}(x)

            2: Ψ_i(x) = ( Φ~_i(α_{i+1}) - Φ~_i(x) ) / ( Φ~_i(α_{i+1}) - Φ~_i(β_i) ) * Φ_i(x) +
                         ( Φ~_i(x) - Φ~_i(β_i) ) / ( Φ~_i(α_{i+1}) - Φ~_i(β_i) ) * Φ_{i+1}(x)

            3: Ψ(x) = ∫_{-∞}^{min( x, μ_1 )} ( 1 - f_1(t) / f_1(μ_1) ) f_1(t) dt
                        + ∫_{-∞}^x f_2(t)^2 / f_2(μ) dt
                        + ∫_{min( x, μ_3 )}^x ( 1 - f_3(t) / f_3(μ_3) ) f_3(t) dt
                     = min( Φ_1(x) - Φ^*_1(x) / √2, ( 2 - √2 ) / 4 )
                        + Φ^*_2(x) / √2
                        + max( 0, Φ_3(x) - Φ^*_3(x) / √2 - ( 2 - √2 ) / 4 )

            4: Ψ(x) = Ψ_1(x) - Ψ_1(x)^2 / 2 + Ψ_2(x)^2 / 2,
                    Ψ_1(x) = Φ_1(x) - Φ^*_1(x) / √2 + Φ^*_2(x) / √2,
                    Ψ_2(x) = Φ_3(x) - Φ^*_3(x) / √2 + Φ^*_4(x) / √2

            ただし、Φ_i, Φ_{i+1} は当該接続区間の前後の独立区間を負担する正規分布の累積分布関数、
            Φ~_i(x) = ( Φ_i(x) + Φ_{i+1}(x) ) / 2 、
            f_i, f_{i+1} は当該接続区間の前後の独立区間を負担する正規分布の確率密度関数、μ は平均値、
            Φ^*_i は正規分布 N(μ_i, (σ_i / √2)^2) の累積分布関数である。

            type1.type = 1 は、不連続分布を構成するための、最も単純な連結方法である。
                            また、 continuous = TRUE または symmetric = TRUE のオプションにより、
                            左右対称な連続分布である「平均値が等しい2つの正規分布の平均」が構成できる。
                            なお、このとき、累積分布関数は Ψ(x) = ( Φ_i(x) + Φ_{i+1}(x) ) / 2 となる。
                            ただし、他のオプションとの兼ね合いのために、
                            便宜上、このように作っているだけであって、
                            この type1.type = 1 の連続分布の累積分布関数は、
                            上の 1: に示した不連続分布の累積分布関数の自然な拡張ではない。

            type1.type = 2 は、 1 と同様に、不連続分布を構成するための連結方法であるが、
                            不連続分布の累積分布関数 Ψ_i(x) を β_i → -∞, α_{i+1} → ∞ と自然に拡張することで、
                            連続分布も構成できるように工夫している。
                            continuous = TRUE にすると、2つの確率密度関数の「横方向グラデーション」が構成できる。
                            つまり、確率密度関数の形が、 x = -∞ の点から x = ∞ の点に向かって、
                            横方向に徐々に変化していくようなイメージの分布を構成できる。
                            この type1.type = 2 の連続分布の累積分布関数は、
                            上の 2: に示した不連続分布の累積分布関数の自然な拡張である。
                            また、 symmetric = TRUE にすると、
                            平均値の点で折り返したような左右対称な分布を構成できる
                             (ただし、文字通り「折り返している」ため、平均値の点において微分可能ではない)。

            type1.type = 3 は連続分布に特化した、「縦方向グラデーション」の連結方法である。
                            つまり、確率密度関数の形が、平均値から遠い裾部から、平均値に近い山部に向かって、
                            縦方向に徐々に変化していくようなイメージの分布を構成できる。
                            v.grad = TRUE にすると、構成要素の正規分布は裾部と山部の2つになる (上の式では f_1 = f_3)。
                            v.grad = FALSE にすると、裾部の両側がそれぞれ別の分布になるので、正規分布は3つになる。

            type1.type = 4 は正規分布の連結ではなく、
                            2つの連続な連結ガウス分布を連結した、「縦横グラデーション」の構成方法である。
                            つまり、2つの type1.type = 3, v.grad = TRUE (縦方向グラデーション) の分布を
                            type1.type = 2, continuous = TRUE (横方向グラデーション) で連結する。
                            これは、本ライブラリの連続分布の構成方法の中では、最も自由度が高い方法である。
                            ただし、通常、左右対称な分布にはならない。

            連続分布を構成する場合、経路の構成点は一定の個数でなければならない。
            具体的には、構成点の個数は以下のようにする必要がある。

            ・type1.type = 1 :    continuous = TRUE or symmetric = TRUE ⇒ 3点

            ・type1.type = 2 :    continuous = TRUE ⇒ 3～4点、
                                symmetric = TRUE ⇒ 3点 (必ず確率 0.5 の点を含めること)

            ・type1.type = 3 :    v.grad = TRUE ⇒ 3～4点、
                                v.grad = FALSE ⇒ 3～6点

            ・type1.type = 4 :    5～8点}
}
\value{
nleqslv() を内部で実行した場合はその結果。それ以外は NULL
}
\description{
累積分布関数で分位点をトレースする \link[cgd]{CGD} クラスオブジェクトを生成する。
本関数の本体は \link[cgd]{CGD$set.waypoints} メソッドである。
}
\examples{
## Discontinuous Example:
##	For discontinuous distribution, you can set waypoints as any.
##	The type1.type must be 1 or 2.
a <- trace.q(
	data.frame(
		p = c( 0.2, 0.5, 0.6, 0.7 ),
		q = c( qnorm( c( 0.2, 0.5, 0.6 ), 0, 1 ), 0.5 ) ),
	type1.type = 1 )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## Mean of 2 Normal Distributions Example:
##	The type1.type = 1, continuous = TRUE option-set gives mean of 2 normal distributions.
##	The number of p of waypoints must be 3.
##	And it is better for every point to take different distance from the mean.
a <- trace.q(
	data.frame(
		p = c( 0.1, 0.5, 0.6 ),
		q = c( qnorm( 0.1, 0, 1 ), 0, qnorm( 0.6, 0, 0.75 ) ) ),
	type1.type = 1, continuous = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## Horizontal Gradational Example:
##	The type1.type = 2, continuous = TRUE option-set gives a horizontal gradational distribution.
##	The number of p of the waypoints must be 3 or 4.
a <- trace.q(
	data.frame( p = c( 0.25, 0.5, 0.75 ), q = c( -0.67, 0, 0.53 ) ),
	type1.type = 2, continuous = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## symmetric Example:
##	This option provides a distribution with a symmetric continuous
##	probability density function for type1.type = 2
##	 (and you can use this option for type1.type = 1 as same meaning of "continuous").
##	With this option, the number of p of waypoints must be 3. And one of p[i] must be 0.5.
##	And it is recommended that two of quantiles are set as on the same side of
##	the probability density function as below.
a <- trace.q(
	data.frame( p = c( 0.25, 0.4, 0.5 ), q = c( -0.67, -0.15, 0 ) ),
	type1.type = 2, symmetric = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## uni.sigma Example:
##	This option constructs a distribution in which the standard deviations
##	of the normal distributions of the components are all equal.
##	Since this option reduces the degrees of freedom,
##	you can specify only limited number of quantile-probability points.
a <- trace.q(
	data.frame( p = c( 0.25, 0.4, 0.5 ), q = c( -0.64, -0.25, 0 ) ),
	type1.type = 2, continuous = TRUE, uni.sigma = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## Vertical Gradational Example:
##	The type1.type = 3, v.grad = TRUE option-set gives a vertical gradational distribution.
##	The number of p of waypoints must be 3 or 4.
##
##	Where number of p is 3, you should give each of 3 waypoints a specific role.
##	One is to specify a waypoint on the tail, one is for a waypoint on the head
##	and the other is to specify the mean.
a <- trace.q(
	data.frame( p = c( 0.1, 0.4, 0.5 ), q = c( -1.28, -0.23, 0 ) ),
	type1.type = 3, v.grad = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

a <- trace.q(
	data.frame( p = c( 0.1, 0.4, 0.6, 0.9 ), q = c( -1.92, -0.20, 0.20, 1.92 ) ),
	type1.type = 3, v.grad = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

##	diff.mean = TRUE option force to make different all standard deviations
##	of the normal distributions of the components.
##	But even with this option, some of the standard deviations can be equal sometimes.

a <- trace.q(
	data.frame( p = c( 0.1, 0.3, 0.5 ), q = c( -1.28, -0.42, 0 ) ),
	type1.type = 3, v.grad = TRUE, diff.mean = TRUE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## 3-Mean/Sigma-Differed Vertical Gradational Example:
##	The type1.type = 3 without v.grad option also gives a vertical gradational distribution
##	but the normal distributions of both tail sides will be different each other.
##	The number of p of waypoints must be from 3 to 6.
a <- trace.q(
	data.frame( p = c( 0.1, 0.4, 0.6, 0.9 ), q = c( -1.92, -0.20, 0.20, 1.92 ) ),
	type1.type = 3, v.grad = FALSE )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

## Vertical-Horizontal Gradational Examples:
##	The type1.type = 4 option gives a vertical-horizontal gradational distribution.
##	The number of p of waypoints must be from 5 to 8.
a <- trace.q(
	data.frame(
		p = c( 0.1, 0.25, 0.4, 0.5, 0.6, 0.75, 0.9 ),
		q = c( -1.38, -0.76, -0.28, 0.02, 0.36, 1.10, 2.79 ) ),
	type1.type = 4 )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

a <- trace.q(
	data.frame(
		p = c( 0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9 ),
		q = c( -1.40, -0.96, -0.61, -0.30, 0.32, 0.72, 1.23, 2.21 ) ),
	type1.type = 4 )
plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )
}
\seealso{
\link[cgd]{CGD$set.waypoints}, \href{https://github.com/Kimitsuna-Goblin/CGD}{README.md} (GitHub)
}
